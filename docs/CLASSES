Modifications :
---------------------

-- On n'utilise plus glade du tout
   Raison : Tout le monde sait maintenant programmer en gtk "pur"

-- On utilise plus les #ifdef __cplusplus
   Raison : C'est utilisé par les programmes C++ qui souhaitent utiliser notre code, HORS notre code est le plus haut niveau (ce n'est pas une librairie) ET si jamais on devait en réutiliser une partie (librairies de widgets) GObject est là pour faire des bindings dans d'autres langages (tels que le C++)

-- On ne réalise des classes QUE pour les éléments évidents.
   Ex: Une menubar ne nécessite pas de classe spécifique !


Template de classe GObject
---------------------------
  J'ai cree une template complete de classe GObject de base, bien formatee, qui ne sort aucun warning, etc...

  Vous pouvez rapidement creer une nouvelle paire de fichiers .[c|h] a la norme en utilisant l'utilitaire make_filter contenu dans le repertoire docs/
  Ex : Vous voulez creer une classe PitiviMaClasse
	> ./make_filter MaClasse
	Et vous obtiendrez pitivi-maclasse.c et pitivi-maclasse.h que vous pouvez ensuite deplacez dans le repertoire src/ et commencer directement a travailler dessus. Ce template est archi-complet, vous n'aurez peut etre pas besoin de toutes les methodes...

Ordre d'appel des fonctions GObject lors de l'instanciation:
------------------------------------------------------------
 pitivi_<nom>_class_init() (appelle qu'une fois dans le programme)
 pitivi_<nom>_constructor() (appelle a chaque instanciation)
 pitivi_<nom>_instance_init() (appelle a chaque instanciation)

 Utilisez directement les fonctions pitivi_<nom>_new() qui s'occupera d'effectuer l'instanciation correctement

---------------------------
/!\ /!\ /!\ /!\ /!\ /!\ /!\ 
Ajouter pour les classes :
	propriétés publiques
	propriétés privées
	méthodes
	signaux
/!\ /!\ /!\ /!\ /!\ /!\ /!\ 
---------------------------

----------------------
Les CLASSES
----------------------
 Etant dans une interface graphique, avec la majorité du traitement effectué dans d'autres librairies, nous devons nous attacher à avoir des classes se rapprochant le plus près des éléments graphiques.
 Une classe par fenetre est un bon debut. Ces classes peuvent contenir des éléments définis dans des classes eux-aussi.
 On part du général pour arriver au spécifique.

Liste des classes :
----------------------
** Classes non-graphiques :
---------------------------

 * PitiviMainApp :
	L'application principale, qui contient/utilise toutes les autres classes
	Elle n'est pas une fenetre, mais regit le fonctionnement de l'application
	centralise les informations propres à "L'APPLICATION".
	Elle est la classe lié à GStreamer
	Contient LE GstPipeline général de l'application
	Référence les différents "PitiviProject" ouverts
	Contient un PitiviSettings qui spécifie les réglages de l'application et qui peut être enregistré dans / chargé depuis un fichier

 * PitiviSettings :

	Contient les réglages/préférences de l'application
	Doit pouvoir être sérialisé pour être enregistré/chargé
	
 * PitiviProject :
	Un projet multimédia
	lié à gnonlin
	Contient un GnlTimeline (la timeline principale de gnonlin)
	Contient un PitiviProjectSettings qui spécifie les réglages du projet
	Contient un PitiviProjectSourceList qui spécifie la liste des sources utilisés pour le projet
	Peut être enregistré dans / chargé depuis un fichier

 * PitiviProjectSourceList
	Contient la liste des sources d'un PitiviProject
	Doit pouvoir etre sérialisé pour etre enregistré/chargé

 * PitiviProjectSettings :
	Les réglages de projet
	Aussi bien utilisé pour un projet en particulier que dans la liste des pré-réglages
	Doit pouvoir être sérialisé pour être enregistré/chargé

** Classes de fenetres (Dérivent de GtkWindow) :
------------------------------------------------

 * PitiviToolboxWindow :
	Contient la PitiviToolbox et le menu général
	Les callbacks de la MenuBar appellent les méthodes adéquates de PitiviMainApp
	Fenetre minimum de l'application.
	Unique pour l'application

 * PitiviSourceListWindow :
	contient la librairie des sources mutimédias (PitiviSourceList)
	Propre à chaque projet, ou s'ajuste suivant le "focus"

 * PitiviViewerWindow	:
	contient le visualisateur multimédia
	Propre à chaque projet, ou s'ajuste suivant le "focus"

 * PitiviNewProjectWindow :
	Fenetre de creation d'un nouveau projet
	Permet de créer un nouveau projet à partir d'un PitiviProjectSettings
	Donne accés aux PitiviProjectSettings disponibles, et permet d'en ajouter/supprimer/modifier

 * PitiviProjectSettingsWindow :
	Propriétés d'un projet
	Permet de modifier les réglages d'un projet (PitiviProjectSettings)
	Propre à chaque projet

 * PitiviCaptureWindow :
	Fenetre de capture multimédia
	Unique à l'application
	permet de capturer des sources à mettre dans la sourcelist (à choisir)

 * PitiviTimelineWindow :
	contient la PitiviTimeline et le menu de projet
	Propre à chaque projet

 * PitiviEffectsWindow :
	Affiche et donne accés aux effets (transition/audio/vidéo/...)
	Unique pour l'application

 * PitiviSettingssWindow :
	Contient les préférences du programme
	Unique pour l'application


** Classes de Widgets :
-----------------------

 * PitiviToolbox(GtkToolbar) :
	Boites à outils, contient les outils d'edition
 
 * PitiviTimeline :
	Ligne de temps, espace d'edition principal.
	Lié au GnlTimeline du (PitiviTimelineWindow du) PitiviProject en cours
	Contient des PitiviTimelineLayer

 * PitiviTimelineLayer :
	Couche de média
	Lié au bon GnlLayer du (GnlTimeline du) PitiviTimeline conteneur
	Contient des PitiviTimelineSource et des PitiviTimelineOperation

 * PitiviTimelineSource :
	Séquence de média
	Lié au bon GnlSource du (GnlLayer du) PitiviTimelineLayer conteneur

 * PitiviTimelineOperation :
	Séquence d'effet
	Lié au bon GnlOperation du (GnlLayer du) PitiviTimelineLayer conteneur
