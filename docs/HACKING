Hacking on PiTiVi

* Coding Style Guide
--------------------
- We rely on the Python Style Guide PEP-8
	(http://www.python.org/doc/peps/pep-0008/)

  The only exception to it is regarding the "80 columns" rule.
  Since Python is a very concise/compact language, we can afford to be
  a little bit more flexible on the line length than languages such as C.

  When deciding whether or not you should split your line when it exceeds
  79 characters, ask yourself: "does it truly improve legibility?"

  What this translates to is:
    - Try to respect the "80 columns/chars" rule of PEP8 when reasonable,
      that is when the line is really too long.

    - When the contents can fit within the 80 chars,
      or when it only "slightly" exceeds that limit, keep it on one line.
      Otherwise, it just hurts legibility and gives a weird "shape" to the code.

      As you can see, it depends on the context
      and what you think makes the most easily readable code.


  For translatable multiline strings, use Python's implicit line continuation
  instead of manually concatenating with the plus (+) sign. For example, this
  is incorrect, gettext will consider it as two separate strings:
        _("<b>First line</b>\n" +
          "Some second line that is too long to fit on the first line anyway"

  Instead, this is the translator-friendly version:
        _("<b>First line</b>\n"
          "Some second line that is too long to fit on the first line anyway"

- for method names we use the mixedCase style
  Ex :
  class MyClass:

     def aReallyImportantMethod(self):
         self.doSomething()

- for callbacks, the name of the methods used should:
  - follow same conventions as normal method names
  - be prepended with two underscores since it's private
  - be appended with Cb
  Ex :

  class MyClass:

     def someMethod(self):
         self.someobject.connect('event', self.__someObjectEventCb)

     def __someObjectEventCb(self, object, arg):
         print "our callback was called"

- for function names, we use the small_caps_with_underscore style.
  This enables clear separation between functions and methods.

- for other class attributes we use the same calling convention as
  for functions:
  Ex : @property
       def water_level(self):
          """ The level of the water in meters"""
          return self.__water_level

- unused arguments in method should be prefixed by 'unused_'.
  The most common place where this would happen is in callbacks from gobject
  signals:
  Ex : (we don't use the second argument, but we do use pad)
     def _padAddedCb(self, unused_element, pad):
        ...

- The following naming should be used for class properties/methods:
  * public : <name>
  * protected : _<name>
  * private : __<name>

- Imported modules should be done in this order:
  * system modules
  * top-level pitivi modules (ex : pitivi.project)
  * modules in the same directory

* Debugging
-----------

- All debug output should be done through the gstreamer debugging system:
  ex : gst.debug("wow")

- Whenever appliable, the debugging should be used on gstreamer objects
