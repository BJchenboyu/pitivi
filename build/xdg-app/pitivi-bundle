#!/bin/bash

# ------------------------------------------- #
# Repository and bundle setup variables.
# Those are the only variable to set if you
# want to create an installer for another
# application
# ------------------------------------------- #

# The usual application name
APPLICATION_NAME=pitivi

# Where to build the XDG_APP
XDGAPP_ENVPATH=${XDGAPP_ENVPATH:-$HOME/$APPLICATION_NAME-xdg-app}

# The name of the bundled application (must respect xdg-app application naming convention).
APPLICATION_REF_NAME=org.pitivi.Pitivi
# Local path to the application repository
APPLICATION_REPOSITORY=$XDGAPP_ENVPATH/$APPLICATION_NAME

# The name given to the application in the .desktop file
APPLICATION_DESKTOP_NAME="(Daily) Pitivi"
# The default branch to use and create if generating the bundle
BRANCH="master"

# The URL of the bundle remote repository
APPLICATION_XDG_APP_REPO=http://people.freedesktop.org/~tsaunier/xdg-app-repos/pitivi/

# The name to give to the repository if it is not registered in xdg-app yet
APPLICATION_DEFAULT_REPO_NAME=pitivi

# The name of the runtime to build the bundle against
RUNTIME_NAME=org.gnome.Platform
# The name of the Sdk to build the bundle against
SDK_NAME=org.gnome.Sdk
# The version of the Sdk to build the bundle against
SDK_VERSION=3.20
# The URL of the Sdk remote repository
SDK_REPO=http://sdk.gnome.org/repo/
# The name to give to the repository if it is not registered in xdg-app yet
SDK_DEFAULT_REPO_NAME=gnome

# ------------------------------------------- #

# Computation of actual variable values
APPLICATION_REPO_NAME=`xdg-app list-remotes --user -d | grep "$APPLICATION_XDG_APP_REPO" |awk '{ print $1 }'`
APPLICATION_REPO_NAME=${APPLICATION_REPO_NAME:-$APPLICATION_DEFAULT_REPO_NAME}
SCRIPTDIR="$( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})"  )" && pwd  )"

SDK_REPO_NAME=`xdg-app list-remotes --user -d | grep "$SDK_REPO" |awk '{ print $1 }'`
SDK_REPO_NAME=${SDK_REPO_NAME:-$SDK_DEFAULT_REPO_NAME}

REPO=$XDGAPP_ENVPATH/xdg-app-repos/$APPLICATION_NAME

# ------------------------------------------- #
XDG_APP_INSTALL="xdg-app install --user "
XDG_APP_UPDATE="xdg-app update --user "
XDG_APP_ADD_REMOTE="xdg-app add-remote --no-gpg-verify --user "

# Some terminal output color values
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

HELP="Helper script to work with xdg-app for $APPLICATION_NAME

Options:
--------

  -d,  --devel:      Setup a devel environment, meaning that it et you in
                     a bash environment ready to work on $APPLICATION_NAME, not that the environment
          will be 'read only' and you will be only able to work on $APPLICATION_NAME
          itself easily. To have more control, you should use the --build option.
  -b,  --build:      Build $APPLICATION_NAME and its dependencies inside a xdg-app environment.
  -u,  --update:     Update the runtime/sdk/app and rebuild the development environment if needed
  -n,  --no-update:  Do not update anything (By default we update bundles when not in development mode)
       --bundle:     Create bundle repository in $REPO, implies --build
  -b=, --branch=:    The xdg-app branch to use (0.95, master...)
  -c,  --clean:      Clean previous builds and restart from scratch
       --use-remote: Build from the official repository (master branch)

You can find more information about xdg-app at: https://wiki.gnome.org/Projects/SandboxedApps
"

for i in "$@"
do
  case $i in
    -h|--help)
    echo "$HELP"
    exit 0
    ;;
    -d|--devel)
    DEVEL=true
    shift
    ;;
    -u|--update)
    UPDATE=true
    shift
    ;;
    -n|--no-update)
    NO_UPDATE=true
    shift
    ;;
    -bu|--bundle)
    BUNDLE=true
    shift
    ;;
    -c|--clean)
    CLEAN=true
    shift
    ;;
    -b=*|--branch=*)
    BRANCH="${i#*=}"
    shift
    ;;
    -b|--build)
    BUILD=true
    shift
    ;;
    --installer)
    INSTALLER=true
    shift
    ;;
    --use-remote)
    USE_REMOTE=true
    shift
    ;;
  esac
done

which xdg-app > /dev/null 2>&1
if [ ! $? -eq 0 ]
then
  printf "$RED \n\n\nYou need to install xdg-app to be able to use the '$0' script.

You can find some informations about how to install it for your distribution at:

  * https://wiki.gnome.org/Projects/SandboxedApps/NightlyBuilds $NC\n\n\n"

  if [ -n "$INSTALLER" ]
  then
    printf "\n\nYou can now exit that terminal."
	read
  fi
  exit 1
fi

SDK_INSTALLED=`xdg-app list-runtimes -d |grep "$SDK_NAME/.*/$SDK_VERSION"`
SDK_LOCAL_INSTALLED=`xdg-app list-runtimes -d |grep "$SDK_NAME.Locale/.*/$SDK_VERSION"`

RUNTIME_INSTALLED=`xdg-app list-runtimes -d |grep "$RUNTIME_NAME/.*/$SDK_VERSION"`
RUNTIME_LOCAL_INSTALLED=`xdg-app list-runtimes -d |grep "$RUNTIME_NAME.Locale/.*/$SDK_VERSION"`
APP_INSTALLED=`xdg-app list-apps -d |grep "$APPLICATION_REF_NAME/.*/$BRANCH"`

if [ -n "$BUNDLE" ]
then
  BUILD=true
  DEVEL=true
fi

if [ -n "$BUILD" ]
then
  which xdg-app-builder > /dev/null 2>&1 || (echo "You need to install xdg-app-builder to \
  use the $0 script for development.

  xdg-app-builder was introduced between the 0.4.5 and 0.4.6 xdg-app releases.
  "; exit 1)

  DEVEL=true
fi

if [ -z "$DEVEL" ] && [ -z "$NO_UPDATE" ]
then
  UPDATE=true

  if [ -n "$*" ]
  then
    echo "Unknown arguments: $*"
    echo ""
    echo "$HELP"

    exit 1
  fi

  if [ -n "$RUNTIME_INSTALLED" ]
  then
    printf "$GREEN\n==========\nUpdating $APPLICATION_NAME \n==========$NC\n\n"
  else
    printf "$GREEN\n==========\nInstalling $APPLICATION_NAME \n==========$NC\n\n"
  fi
fi

# Install needed runtimes
if [ -n "$DEVEL" ]
then
  if [ -z "$SDK_INSTALLED" ]
  then
    echo "-> Installing $SDK_NAME $SDK_VERSION"
    $XDG_APP_ADD_REMOTE $SDK_REPO_NAME $SDK_REPO > /dev/null 2>&1
    $XDG_APP_INSTALL $SDK_REPO_NAME $SDK_NAME $SDK_VERSION || exit 1
  fi

  if [ -z "$SDK_LOCAL_INSTALLED" ]
  then
    echo "-> Installing $SDK_NAME.Locale"
    $XDG_APP_INSTALL $SDK_REPO_NAME $SDK_NAME.Locale $SDK_VERSION || exit 1
  fi
fi

if [ -z "$RUNTIME_INSTALLED" ]
then
  echo "-> Installing $RUNTIME_NAME $SDK_VERSION $RUNTIME_INSTALLED"

  $XDG_APP_ADD_REMOTE $SDK_REPO_NAME $SDK_REPO > /dev/null 2>&1
  $XDG_APP_INSTALL $SDK_REPO_NAME $RUNTIME_NAME $SDK_VERSION || exit 1
fi
if [ -z "$RUNTIME_LOCAL_INSTALLED" ]
then
  echo "-> Installing $RUNTIME_NAME.Locale"
  $XDG_APP_INSTALL $SDK_REPO_NAME $RUNTIME_NAME.Locale $SDK_VERSION || exit 1
fi

# Update runtimes if needed
if [ -n "$UPDATE" ]
then
  echo "-> Updating $RUNTIME_NAME $SDK_VERSION"

  $XDG_APP_UPDATE $RUNTIME_NAME $SDK_VERSION || exit 1

  echo "-> Updating $RUNTIME_NAME.Locale"
  $XDG_APP_UPDATE $RUNTIME_NAME.Locale $SDK_VERSION || exit 1

  if [ -n "$DEVEL" ]
  then
    echo "-> Updating $SDK_NAME $SDK_VERSION"
    $XDG_APP_UPDATE $SDK_NAME $SDK_VERSION || exit 1

    echo "-> Updating $SDK_NAME.Locale $SDK_VERSION"
    $XDG_APP_UPDATE $SDK_NAME.Locale $SDK_VERSION || exit 1
  fi
fi

if [ -z "$USE_REMOTE" ]
then
  cd $APPLICATION_REPOSITORY
  DEVELOPMENT_BRANCHNAME=`git branch 2>&1 |grep \* |awk '{ print $2 }'`
  cd - > /dev/null
  if [ x$DEVELOPMENT_BRANCHNAME == 'x' ]
  then
    DEVELOPMENT_BRANCHNAME="master"
    APP_BUILD_NAME=$APPLICATION_NAME
  else
    APP_BUILD_NAME="$APPLICATION_NAME-$DEVELOPMENT_BRANCHNAME"
  fi
  LOCAL_REPOS_PATH=$XDGAPP_ENVPATH
else
  DEVELOPMENT_BRANCHNAME=${BRANCH:-master}
  APP_BUILD_NAME=$APPLICATION_NAME
  LOCAL_REPOS_PATH=/nowhere/really
fi

if [ -n "$BUNDLE" ]
then
  PREFIX=$XDGAPP_ENVPATH/$APP_BUILD_NAME/
else
  PREFIX=$XDGAPP_ENVPATH/prefix
fi

if [ -n "$CLEAN" ]
then
  echo "Cleaning environment..."

  echo "-> Removing $PREFIX"
  rm -Rf $PREFIX

  echo "-> Removing .xdg-app-builder"
  rm -Rf .xdg-app-builder
fi

if [ -z $DEVEL ] || [ -z $BUILD ]
then
   $XDG_APP_ADD_REMOTE $APPLICATION_REPO_NAME $APPLICATION_XDG_APP_REPO > /dev/null 2>&1

   if [ -z "$APP_INSTALLED" ]
   then
     echo "Installing $APPLICATION_REF_NAME $BRANCH..."

     $XDG_APP_INSTALL $APPLICATION_REPO_NAME $APPLICATION_REF_NAME $BRANCH
   fi

   if [ -n "$UPDATE" ]
   then
     echo "-> Updating $APPLICATION_REF_NAME $BRANCH..."

     $XDG_APP_UPDATE $APPLICATION_REF_NAME $BRANCH
   fi
fi

if [ -n "$DEVEL" ]
then
  if [ -z $BUILD ]
  then
    if [ -z "$APP_INSTALLED" ] && [ -z "$USE_REMOTE" ]
    then
      cd $APPLICATION_REPOSITORY
      xdg-app run --branch=$BRANCH -d --command="./autogen.sh" $APPLICATION_REF_NAME
      xdg-app run --branch=$BRANCH -d --command="make" $APPLICATION_REF_NAME
    fi

    echo "=============================="
    echo "Entering prebuilt environment "
    echo "=============================="

    xdg-app run --branch=$BRANCH -d --command=$SCRIPTDIR/enter_env $APPLICATION_REF_NAME
    exit $?
  fi

  if [ -n $BUILD ] && [ ! -f $PREFIX/metadata ]
  then
    UPDATE=true
    echo "Updating env $PREFIX"
  fi

  if [ -n "$UPDATE" ]
  then
    # Update values in the json template
    JSON=$SCRIPTDIR/$APP_BUILD_NAME.json
    $SCRIPTDIR/json-template-expander $SCRIPTDIR/$APPLICATION_NAME.template.json $JSON $LOCAL_REPOS_PATH

    echo "-> Removing $PREFIX"
    rm -Rf $PREFIX

    XDG_APP_BUILD_OPTIONS=""
    if [ -z $BUNDLE ]
    then
      XDG_APP_BUILD_OPTIONS=" $XDG_APP_BUILD_OPTIONS --build-only"
    fi

    echo "-> Building $APPLICATION_NAME $DEVELOPMENT_BRANCHNAME from $JSON (options: $XDG_APP_BUILD_OPTIONS)"
    cd $SCRIPTDIR
    echo "Building with: xdg-app-builder $XDG_APP_BUILD_OPTIONS $PREFIX $JSON"
    xdg-app-builder --ccache $XDG_APP_BUILD_OPTIONS $PREFIX $JSON || exit 1

    if [ -z $BUNDLE ]
    then
      echo "-> Building $APPLICATION_NAME from current repository"
      cd $APPLICATION_REPOSITORY && xdg-app build --env=PYTHON=python3 $PREFIX ./autogen.sh --prefix=/app || exit 1
      xdg-app build --env=PYTHON=python3 $PREFIX make || exit 1
    fi
  fi

  # Launch development environment if we are not creating a bundle
  if [ -z $BUNDLE ]
  then
    xdg-app build --socket=x11 --socket=session-bus --socket=pulseaudio \
      --share=network \
      --env=GST_DEBUG=$GST_DEBUG \
      --env=GST_VALIDATE=$GST_VALIDATE \
      --env=GST_VALIDATE_LAUNCHER_DEBUG=$GST_VALIDATE_LAUNCHER_DEBUG \
      --env=PITIVI_DEBUG=$PITIVI_DEBUG \
      --env=PITIVI_DEVELOPMENT=1 \
      --env=GST_DEBUG_DUMP_DOT_DIR=$GST_DEBUG_DUMP_DOT_DIR \
      $PREFIX $SCRIPTDIR/enter_env $*

    exit $exitcode
  fi

fi


if [ -n "$BUNDLE" ]
then
  echo "-> Creating repository $REPO if needed"
  mkdir -p $REPO

  echo "Exporting repo $REPO $DEVELOPMENT_BRANCHNAME"
  xdg-app build-export $REPO $PREFIX $DEVELOPMENT_BRANCHNAME || exit 1

  echo "Updating repo $REPO"
  xdg-app build-update-repo $REPO || exit 1

  echo "DONE!"
fi
